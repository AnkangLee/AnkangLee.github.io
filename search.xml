<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>rocketmq-docker单机环境搭建</title>
      <link href="/2019/07/17/docker-rocketmq%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/07/17/docker-rocketmq%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="准备-docker-镜像"><a href="#准备-docker-镜像" class="headerlink" title="准备 docker 镜像"></a>准备 docker 镜像</h3><h4 id="准备-rocketmq-镜像"><a href="#准备-rocketmq-镜像" class="headerlink" title="准备 rocketmq 镜像"></a>准备 rocketmq 镜像</h4><p>​    官方文档给出了如何构造指定版本的 rocketmq 镜像教程。详见 <a href="https://github.com/apache/rocketmq-externals/tree/master/rocketmq-docker" target="_blank" rel="noopener">rocketmq-docker</a>。官方教程比较详细，这里不赘述了。</p><h4 id="准备-rocketmq-console-镜像"><a href="#准备-rocketmq-console-镜像" class="headerlink" title="准备 rocketmq-console 镜像"></a>准备 rocketmq-console 镜像</h4><p>​    因为官方文档没有给 rocketmq-console 的镜像，这里从 docker-hub 拉取一个镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull styletang/rocketmq-console-ng</span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><h4 id="启动-rocketmq-容器"><a href="#启动-rocketmq-容器" class="headerlink" title="启动 rocketmq 容器"></a>启动 rocketmq 容器</h4><p>​    直接使用官方提供的 play-docker.sh 的即可启动 rokcetmq 容器。</p><h4 id="启动-rocketmq-console-容器"><a href="#启动-rocketmq-console-容器" class="headerlink" title="启动 rocketmq-console 容器"></a>启动 rocketmq-console 容器</h4><p>​    dockerhub 提供了如何启动 rocketmq-console-ng 的命令，摘录如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e "JAVA_OPTS=-Drocketmq.namesrv.addr=xxx.xxx.xxx.xxx:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false" -p 8080:8080 -t styletang/rocketmq-console-ng</span><br></pre></td></tr></table></figure><h3 id="测试-rocketmq-docker-环境"><a href="#测试-rocketmq-docker-环境" class="headerlink" title="测试 rocketmq-docker 环境"></a>测试 rocketmq-docker 环境</h3><h4 id="运行producer"><a href="#运行producer" class="headerlink" title="运行producer"></a>运行producer</h4><p>​    直接使用 rocketmq 官方文档 SyncProducer，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//Instantiate with a producer group name.</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span></span><br><span class="line">            DefaultMQProducer(<span class="string">"quick_start_producer"</span>);</span><br><span class="line">        <span class="comment">// Specify name server addresses.</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line">        <span class="comment">//Launch the instance.</span></span><br><span class="line">        producer.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//Create a message instance, specifying topic, tag and message body.</span></span><br><span class="line">            Message msg = <span class="keyword">new</span> Message(<span class="string">"dockerTopicTest"</span> <span class="comment">/* Topic */</span>,</span><br><span class="line">                <span class="string">"TagA"</span> <span class="comment">/* Tag */</span>,</span><br><span class="line">                (<span class="string">"Hello RocketMQ "</span> +</span><br><span class="line">                    i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="comment">/* Message body */</span></span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//Call send message to deliver message to one of brokers.</span></span><br><span class="line">            SendResult sendResult = producer.send(msg);</span><br><span class="line">            System.out.printf(<span class="string">"%s%n"</span>, sendResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Shut down once the producer instance is not longer in use.</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    复制粘贴，启动运行，一气呵成，然后报错了….</p><blockquote><p>No route info of this topic, dockerTopicTest。</p></blockquote><p>​    分析一下，没有暴露端口出来，修改 play-docker.sh 暴露端口，第二次测试，又报错了…</p><blockquote><p>RemotingTooMuchRequestException: sendDefaultImpl call timeout</p></blockquote><p>​    进入 rmqnamesrv 容器，查看集群状态，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &#123;container_id&#125; ./mqadmin clusterList -n &#123;nameserver_ip&#125;:9876</span><br></pre></td></tr></table></figure><p>​    发现 broker 的地址是 172.17.0.3:10911，修改 broker 的 ip 为本机的 ip。修改后的 broker.conf 文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">brokerClusterName = DefaultCluster</span><br><span class="line">brokerName = broker-a</span><br><span class="line">brokerId = 0</span><br><span class="line">deleteWhen = 04</span><br><span class="line">fileReservedTime = 48</span><br><span class="line">brokerRole = ASYNC_MASTER</span><br><span class="line">flushDiskType = ASYNC_FLUSH</span><br><span class="line">brokerIP1 = xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><p>​    同时修改启动 broker 的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 10911:10911 -p 10909:10909 -v `pwd`/data/broker/logs:/home/rocketmq/logs -v `pwd`/data/broker/store:/home/rocketmq/store -v `pwd`/data/broker/conf/broker.conf:/opt/rocketmq-4.5.0/conf/broker.conf --name rmqbroker --link rmqnamesrv:namesrv -e "NAMESRV_ADDR=namesrv:9876" rocketmqinc/rocketmq:4.5.0 sh mqbroker -c /opt/rocketmq-4.5.0/conf/broker.conf</span><br></pre></td></tr></table></figure><p>​    再次启动 SyncProducer，启动成功!</p><p>​    启动 broker 时加 <code>-c /opt/rocketmq-4.5.0/conf/broker.conf</code> 的原因如下，代码来自 rocketmq 的 <strong>BrokerStartup.java</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (commandLine.hasOption(<span class="string">'c'</span>)) &#123;</span><br><span class="line">    String file = commandLine.getOptionValue(<span class="string">'c'</span>);</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">        configFile = file;</span><br><span class="line">        InputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(in);</span><br><span class="line"></span><br><span class="line">        properties2SystemEnv(properties);</span><br><span class="line">        MixAll.properties2Object(properties, brokerConfig);</span><br><span class="line">        MixAll.properties2Object(properties, nettyServerConfig);</span><br><span class="line">        MixAll.properties2Object(properties, nettyClientConfig);</span><br><span class="line">        MixAll.properties2Object(properties, messageStoreConfig);</span><br><span class="line"></span><br><span class="line">        BrokerPathConfigHelper.setBrokerConfigPath(file);</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li><a href="https://github.com/apache/rocketmq-docker" target="_blank" rel="noopener">github:rocketmq-docker</a></li><li><a href="https://github.com/apache/rocketmq/blob/master/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java" target="_blank" rel="noopener">github:rocketMQ-broker启动类</a></li><li><a href="https://hub.docker.com/r/styletang/rocketmq-console-ng/" target="_blank" rel="noopener">dockerhub:rocketmq-console-ng</a></li><li><a href="http://rocketmq.apache.org/docs/quick-start/" target="_blank" rel="noopener">rocketmq:quick-start</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> rocketmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker配置mysql环境</title>
      <link href="/2019/07/15/docker%E9%85%8D%E7%BD%AEmysql%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/07/15/docker%E9%85%8D%E7%BD%AEmysql%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><h4 id="拉取-mysql-server-镜像，使用默认-tag-latest"><a href="#拉取-mysql-server-镜像，使用默认-tag-latest" class="headerlink" title="拉取 mysql-server 镜像，使用默认 tag: latest"></a>拉取 mysql-server 镜像，使用默认 tag: latest</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><h4 id="运行-mysql-实例"><a href="#运行-mysql-实例" class="headerlink" title="运行 mysql 实例"></a>运行 mysql 实例</h4><p>​    后台运行一个名为 msyql 并且 ROOT 用户密码为 my-secret-pw 的mysql容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run --name mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql</span><br></pre></td></tr></table></figure><h4 id="关闭并删除容器"><a href="#关闭并删除容器" class="headerlink" title="关闭并删除容器"></a>关闭并删除容器</h4><p>​    关闭容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop mysql</span><br></pre></td></tr></table></figure><p>​    删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm mysql</span><br></pre></td></tr></table></figure><h3 id="自定义数据库配置"><a href="#自定义数据库配置" class="headerlink" title="自定义数据库配置"></a>自定义数据库配置</h3><p>​    MYSQL 镜像中默认的配置文件是 <code>/etc/mysql/my.cnf</code>，数据目录是 <code>/var/lib/mysql</code>。本地配置 <code>docker-mysql.conf</code> 如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="number">1</span> <span class="comment">#服务Id唯一</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">log-error</span> = /var/log/mysql/error.log</span><br><span class="line"><span class="comment">#只能用IP地址</span></span><br><span class="line">skip_name_resolve</span><br><span class="line"><span class="comment">#数据库默认字符集</span></span><br><span class="line"><span class="attr">character-set-server</span> = utf8mb4</span><br><span class="line"><span class="comment">#数据库字符集对应一些排序等规则 </span></span><br><span class="line"><span class="attr">collation-server</span> = utf8mb4_general_ci</span><br><span class="line"><span class="comment">#设置client连接mysql时的字符集,防止乱码</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET NAMES utf8mb4'</span></span><br></pre></td></tr></table></figure><p>​    启动 mysql 容器，使用自定义的配置文件，并将mysql 容器的数据库文件夹映射到宿主机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -d --rm \</span><br><span class="line">-v /Users/LeeAnkang/dev/docker-vol/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /Users/LeeAnkang/dev/docker-vol/mysql/data:/var/lib/mysql \</span><br><span class="line">-p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure><p>​    这样，一个 mysql 容器就启动起来了，使用本地的配置文件，数据文件记录在本地。</p><h3 id="优化使用"><a href="#优化使用" class="headerlink" title="优化使用"></a>优化使用</h3><p>​    将上小节的启动命令单独放入 start.sh 文件，使用时候直接启动。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li><a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener">dockerhub:mysql</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/linux-installation-docker.html" target="_blank" rel="noopener">Deploying MySQL on Linux with Docker</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于新博客</title>
      <link href="/2019/07/10/%E5%85%B3%E4%BA%8E%E6%96%B0%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/07/10/%E5%85%B3%E4%BA%8E%E6%96%B0%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    旧 blog 已亡，新 blog 初立。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
